https://help.ubuntu.ru/wiki/ffmpeg#%D1%83%D0%BF%D1%80%D0%B0%D0%B2%D0%BB%D0%B5%D0%BD%D0%B8%D0%B5_ffmpeg_%D1%87%D0%B5%D1%80%D0%B5%D0%B7_%D1%82%D0%B5%D1%80%D0%BC%D0%B8%D0%BD%D0%B0%D0%BB

*** https://trofimovdigital.ru/blog/convert-video-with-ffmpeg

template: 1.[ffmpeg] 2.[input option] 3.[input file] 4.[main-input-param,-vf] 5.[vcodec,video param] 6.[acodec,audio param,-af] 7.[output file]
examples: 
1) ./ffmpeg.exe -i video.mp4 -r 60 -s 1920x1080 out-video.mp4

-i [input-opt] - input
-r [output-opt] - fps
-s [output-opt] - video size (альтернатива -vf scale=w:h)


2) ./ffmpeg.exe -ss 00:00:20 -t 00:00:10 -i video.mp4 -r 29 -b 4M video-fiexed.mp4

-ss <position> [before-input-opt] - start position
-b <value>{K / M} [output-opt] - bitrate (HD=2500-4000 (3500-5000), FHD=4500-6000, HD1080=4000-8000, 4k=8000-14000 kbit/s)
	K - KBit; M - MBit (2000K = 2M)
-t <position> [before-input-opt] - end position

3) ./ffmpeg.exe -ss 00:00:20 -t 00:00:10 -i video.mp4 -r 29 -vn -b 4M video-fiexed.mp4

-vn [output-opt] - not use video
-an [output-opt] - not use audio

4) ./ffmpeg.exe -i video.mp4 -c:v vp9 -b:v 3M video-fiexed.mp4

-c:{v/a} [output-opt] - audio or video codec
-b:{v/a} [output-opt] - audio or video bitrate

5) ./ffmpeg.exe -safe 0 -f concat -i files.txt -c copy video-fixed-2.mp4

6) ./ffmpeg -stream_loop -1 -i input.mp4 -c copy output.mp4 - бесконечное зацикливание файла. Выход только при нажатии клавиши
* примечание: без "-c copy" выполняется в разы медленнее

7) ./ffmpeg -f concat -safe 0 -i files.txt -c:v vp9 -r 29 -b:v 1M -s 1080x720 -vf mpdecimate,setpts=N/FRAME_RATE/TB "C:\Users\aleks\Downloads\test-video.mp4"

8) ./ffmpeg.exe -i "D:\games\ffmpeg\12345.mp4" -acodec copy -vcodec copy -vbsf h264_mp4toannexb -f mpegts video3.ts 
Эту команду нужно выполнить перед склейкой файлов, чтобы быть уверенным в том, что форматы видео и кодировки будут совпадать
Далее выполняем обычную команду: ./ffmpeg.exe -f concat -safe 0 -i files.txt -c copy output.mp4
В файле files.txt лежать указаны ссылки на файлы 'video1, 2, 3.ts', С ними и производить все дальнейшие манипуляции

-vf scale=1280:720 - более качественное разрешение

9) ffmpeg -i input.mp4 -filter:v "crop=640:480:200:150" output.mp4 - кадрирование
Для кадрирования изображения предназначен фильтр crop. Его параметры имеют следующий вид crop=w:h:x:y, 
где w — ширина прямоугольника, который нужно вырезать из исходного видео, h — высота прямоугольника, 
x и y — x координаты точки начала обрезки.

10) ffmpeg -i input.mp4 -vf crop=in_w-2*2:in_h-2*4,scale=1280:720 output.mp4 - пример комбинирования фильтров

-aspect 16:9 - Соотношение сторон

https://trofimovdigital.ru/blog/convert-video-with-ffmpeg#:~:text=%D1%81%20%D1%80%D1%83%D1%81%D1%81%D0%BA%D0%B8%D0%BC%D0%B8%20%D1%81%D1%83%D0%B1%D1%82%D0%B8%D1%82%D1%80%D0%B0%D0%BC%D0%B8.-,%D0%9A%D0%BE%D0%BD%D0%B2%D0%B5%D1%80%D1%82%D0%B0%D1%86%D0%B8%D1%8F%20%D0%B0%D1%83%D0%B4%D0%B8%D0%BE%D0%B4%D0%BE%D1%80%D0%BE%D0%B6%D0%B5%D0%BA,-%D0%95%D1%81%D0%BB%D0%B8%20%D0%B0%D1%83%D0%B4%D0%B8%D0%BE%D0%B4%D0%BE%D1%80%D0%BE%D0%B6%D0%BA%D0%B0%20%D0%BE%D0%B4%D0%BD%D0%B0
https://slhck.info/video/2017/02/24/crf-guide.html

11) -lavfi '[0:v]scale=ih*16/9:-1,boxblur=luma_radius=min(h\,w)/20:luma_power=1:chroma_radius=min(cw\,ch)/20:chroma_power=1[bg];[bg][0:v]overlay=(W-w)/2:(H-h)/2,crop=h=iw*9/16' -vb 800K output.webm
конвертировать вертикальное видео в горизонтальное с замыленным задним фоном





